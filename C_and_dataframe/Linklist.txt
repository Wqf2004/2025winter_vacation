问题描述：请实现线性表的链式表达，主要以单链表为主。
解题思路：请依循下面的口诀
书写程序伪代码的口诀：打好标号，与缩进；
				   初始化，返回值，
				   程序功能记心头。
				   
插入算法小口诀：插入位置，先明确；
			 插此非此，求其前；
			 开始位置，放开头；
			 开始下标，设为一。
				
头插法小口诀：从头插入，不遍历；
			插入结果，为逆序；
			抓住next，改指向。
			
尾插法小口诀：引入rear，步步进；
			循环结束，莫忘空。

删除节点小口诀：判空操作，要前置；
			 前p后q，永相随；
			 前探为空，找不到；
			 前探非空，跨相等。
解题步骤：
第一步：创建节点和头节点指针结构体
第二步：遍历链表中的节点
第三步：计算链表的长度
第四步：查找链表中的元素
第五步：在链表的指定位置插入元素
第六步：创建新表（头插法和尾插法都要实现）!要先创建头节点
第七步：删除链表中的元素
第八步：清空链表（包括头指针）

#include<stdio.h>
#include<stdlib.h>
#define OK 1
#define NO 0
typedef int datatype; // 起别名
typedef struct node
{
	datatype data;
	struct node* next;
}Node, *Link;

typedef enum
{
	query,
	insert,
	delete
}Operations;

void displayNode(Link head)
{
	Node* p;
	p = head->next;
	if (p == NULL)
	{
		printf("该链表为空");
	}
	while (p != NULL)
	{
		printf("%d ", p->data);
		p = p->next;
	}
}

int length(Link head)
{
	Node* p;
	p = head->next;
	int count = 0;
	while (p != NULL)
	{
		count++;
		p = p->next;
	}
	return count;
}

int queryNode(Link head, datatype x)
{
	Node* p;
	p = head->next;
	int index = 0;
	while (p != NULL)
	{
		index++;
		if (p->data == x)
		{
			return index;
		}
		p = p->next;
	}
	return index;
}

int insertNode(Link head, int index, datatype x)
{
	Node* new = (Link)malloc(sizeof(Node));
	new->data = x;
	new->next = NULL;

	Node* p = head;
	for (int i = 1; i < index; i++)
	{
		if (p == NULL)
		{
			return NO;
		}
		p = p->next;
	}
	if (p != NULL)
	{
		new->next = p->next;
		p->next = new;
	}
	else {
		p = new;
	}
	return OK;
}

Link newList_h(datatype a[], int n)
{
	// 先创立头节点
	Node* head = (Link)malloc(sizeof(Node));
	head->next = NULL;
	for (int i = 0; i < n; i++)
	{
		Node* node = (Link)malloc(sizeof(Node));
		node->data = a[i];
		node->next = head->next;
		head->next = node;
	}
	return head;
}

Link newList_t(datatype a[], int n)
{
	Node* head = (Link)malloc(sizeof(Node));
	head->next = NULL;
	Node* rear = head;
	for (int i = 0; i < n; i++)
	{
		Node* node = (Link)malloc(sizeof(Node));
		node->data = a[i];
		node->next = rear->next;
		rear->next = node;
		rear = node;
	}
	return head;
}

int deleteNode(Link head, datatype x)
{
	if (head == NULL || head->next == NULL)
	{
		return NO;
	}
	Node* p = head;
	Node* q = head->next;
	int index = 0;
	while (q != NULL)
	{
		index++;
		if (q->data == x)
		{
			p->next = q->next;
			return index;
		}
		p = q;
		q = q->next;
	}
	return NO;
}

void clearLink(Link head)
{
	while (head != NULL)
	{
		Node* p = head;
		head = p->next;
		free(p);
	}
}

int main()
{
	// 分别用头插法和尾插法创建一个单链表
	datatype a[] = { 1,2,3,4,5,6 };
	Link list_0 = newList_h(a, 5);
	Link list_1 = newList_t(a, 6);
	printf("头插法输出链表0：\n");
	displayNode(list_0);
	putchar(10);
	printf("尾插法输出链表1：\n");
	displayNode(list_1);
	putchar(10);

	// 比较两个链表的长度是否相等
	int length_1 = length(list_0);
	int length_2 = length(list_1);
	if (length_1 == length_2)
	{
		printf("两个链表的长度相等！\n");
		printf("长度均为：%d\n", length_1);
	}
	else {
		printf("两个链表的长度不相等！\n");
		printf("链表0的长度为%d,链表1的长度为%d\n", length_1, length_2);
	}

	// 查找、插入、删除
	int ID;
	printf("请输入希望处理的表的编号（0 or 1）:");
	scanf("%d", &ID);
	Operations operate;
	printf("请输入希望进行的操作（0：查找，1：插入，2：删除）\n");
	scanf("%d", &operate);
	datatype elem;
	int index;
	int judge;
	switch (ID)
	{
		case 0:
			switch (operate)
			{
				case query:
					printf("请输入需要查找的元素值：");
					scanf("%d", &elem);
					index = queryNode(list_0, elem);
					if (index)
					{
						printf("在list_%d中的第%d位置处找到了%d", ID, index, elem);
					}
					else {
						printf("在list_%d中找不到%d", ID, elem);
					}
					break;
				case insert:
					printf("请输入需要插入的位置：");
					scanf("%d", &index);
					printf("请输入插入的元素值：");
					scanf("%d", &elem);
					judge = insertNode(list_0, index, elem);
					if (judge)
					{
						printf("已经成功向list_%d中的第%d位置插入了%d", ID, index, elem);
					}
					else {
						printf("插入位置不合理！");
					}
					break;
				case delete:
					printf("请输入需要删除的元素值：");
					scanf("%d", &elem);
					index = deleteNode(list_0, elem);
					if (index)
					{
						printf("已经成功从list_%d中的位置%d处删除了%d", ID, index, elem);
					}
					else {
						printf("链表中不存在该元素!");
					}
					break;
				defalut:
					printf("未获得有效处理方法！");
					break;
			}
			break;
		case 1:
			switch (operate)
			{
				case query:
					printf("请输入需要查找的元素值：");
					scanf("%d", &elem);
					index = queryNode(list_1, elem);
					if (index)
					{
						printf("在list_%d中的第%d位置处找到了%d", ID, index, elem);
					}
					else {
						printf("在list_%d中找不到%d", ID, elem);
					}
					break;
				case insert:
					printf("请输入需要插入的位置：");
					scanf("%d", &index);
					printf("请输入插入的元素值：");
					scanf("%d", &elem);
					judge = insertNode(list_1, index, elem);
					if (judge)
					{
						printf("已经成功向list_%d中的第%d位置插入了%d", ID, index, elem);
					}
					else {
						printf("插入位置不合理！");
					}
					break;
				case delete:
					printf("请输入需要删除的元素值：");
					scanf("%d", &elem);
					index = deleteNode(list_1, elem);
					if (index)
					{
						printf("已经成功从list_%d中的位置%d处删除了%d", ID, index, elem);
					}
					else {
						printf("链表中不存在该元素!");
					}
					break;
				default:
					printf("未获得有效处理方法！");
					break;
				}
				break;
		default:
			printf("未获得有效的表序号！");
			break;
	}

	// 清空表
	clearLink(list_0);
	clearLink(list_1);
	return 0;
}