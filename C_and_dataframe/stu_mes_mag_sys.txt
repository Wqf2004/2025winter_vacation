一、学生信息管理系统
学生的基本信息保存在文件a.txt中，a.txt文件不需要编程录入数据，可用文本编辑工具直接生成，包括学号、姓名、性别、宿舍号码、电话号码等信息。
学生成绩基本信息保存在文本文件b.txt中，主要包括：学号、课程编号、课程名称、学分、平时成绩、实验成绩、卷面成绩、综合成绩等。
应具备如下功能：
（1）数据录入功能：对b.txt进行数据录入，只录入每个学生的学号、课程编号、课程名称、学分、平时成绩、实验成绩、卷面成绩共7个数据，综合成绩、学分由程序根据条件自动运算。
    综合成绩的计算：如果本课程的实验成绩为-1，则表示本课程无实验，综合成绩=平时成绩*30%+卷面成绩*70%；如果实验成绩不为-1，表示本课程有实验，综合成绩=平时成绩*15%+实验成绩*15%+卷面成绩*70%。
    实得学分的计算：采用等级学分制。
    综合成绩在90-100之间，应得学分=学分*100%
    综合成绩在80-90之间，应得学分=学分*80%
    综合成绩在70-80之间，应得学分=学分*75%
    综合成绩在60-70之间，应得学分=学分*60%
    综合成绩在60以下，应得学分=学分*0%
	
#include<stdio.h>
#include<stdlib.h>
#define MAX 10 // 定义最大修读课程的数量
// 学生结构体
typedef struct 
{
	char id[8];
	char name[10];
	char sex[8];
	char room[8];
	char phone[20];
	Curse curses[MAX];
}Student;

// 课程结构体
typedef struct
{
	char cid[8];
	char cname[10];
	int credit;
	int day_grade;
	int exp_grade;
	int exam_grade;
	int score;
	int deserve;
}Curse;

int main()
{
	Student a[100];
	FILE* fp;
	char filename[] = "a.txt";
	fp = fopen(filename, "r");
	if (fp == NULL)
	{
		printf("The file is error.\n");
		exit(0);
	}
	int i = 0;
	while (!feof(fp))
	{
		int b = fscanf(fp, "%s %s %s %s %s\n", &a[i].id, &a[i].name, &a[i].sex, &a[i].room, &a[i].phone);
		i++;
	}
	fclose(fp);
	int n = i;
	for (i = 0; i < n; i++)
	{
		printf("%s %s %s %s %s\n", a[i].id, a[i].name, a[i].sex, a[i].room, a[i].phone);
	}
	return 0;
}
（2）查询功能：分为学生基本情况查询和成绩查询两种
    A：学生基本情况查询：
         A1---输入一个学号或姓名（可实现选择），查出此生的基本信息并显示输出。
         A2---输入一个宿舍号码，可查询本室所有的学生的基本信息并显示输出。
    B：成绩查询：
         B1：输入一个学号时，查询出此生的所有课程情况，格式如下：
		学号：XX姓名：XX课程编号：XX课程名称：XX综合成绩：XX实得学分：XX
		学号：XX姓名：XX课程编号：XX课程名称：XX综合成绩：XX实得学分：XX
		学号：XX姓名：XX课程编号：XX课程名称：XX综合成绩：XX实得学分：XX
		学号：XX姓名：XX课程编号：XX课程名称：XX综合成绩：XX实得学分：XX
		...............................................................
		共修：XX科，实得总学分为：XXXX
（3）删除功能：当在a.txt中删除一个学生时，自动地在b.txt中删除此人所有信息。
（4）排序功能：能实现选择，按综合成绩或实得学分升序或降序排序并显示数据。
（5）统计功能：计算各科平均分。    
（6）至少采用文本菜单界面（如果能采用图形菜单界面更好）。
（7）具有登录功能和密码加密功能。
（8）具有纠错功能，对手机号码等信息要有正确性检查。

以下是对建立这样一个学生信息管理系统难度的分析，以及针对大二非计算机专业但电子信息专业学生可尝试题目的建议和题目序列：

### 系统建立难度分析
对于一个完整的学生信息管理系统来说，实现上述所有功能具有一定的难度，主要体现在以下几个方面：

1. **功能复杂性**：该系统涵盖了多个功能模块，包括数据录入、多种条件的查询、文件数据的关联删除、排序、统计以及安全相关的登录和密码加密等功能，
每个功能都需要细致的逻辑设计和代码实现，并且不同功能之间还需要良好的交互与协作，整体的逻辑复杂度较高。
2. **数据处理与计算**：涉及到根据不同规则计算综合成绩和实得学分，以及统计各科平均分等操作，需要准确地运用数学运算和条件判断语句来保证计算结果的正确性，
对数据处理能力有一定要求。
3. **文件操作**：要从文本文件中读取和写入数据，并且保证数据的完整性和一致性，尤其是在关联删除等操作时涉及到两个文件的数据同步处理，
这要求对文件读写操作有较熟练的掌握。
4. **界面设计与交互**：无论是文本菜单界面还是图形菜单界面，都需要考虑如何让用户方便、直观地进行操作选择，
这涉及到一定的用户体验设计和输入输出控制逻辑。
5. **纠错功能**：对手机号码等信息进行正确性检查，需要了解相应的格式规范以及编写合适的验证逻辑来确保数据的合法性。

不过，虽然整体有难度，但通过逐步拆解各个功能模块，分阶段进行开发和调试，是可以尝试构建这个系统的。

### 适合大二非计算机专业（电子信息专业）学生尝试的题目
考虑到该学生目前的知识储备（初学高级语言程序设计和数据结构 C 语言版），可以先从相对基础、独立性较强的功能模块入手进行练习，以下是一些建议尝试的题目：

1. **数据读取与简单计算（对应数据录入中的部分计算功能）**：
    - 从 `b.txt` 文件中读取学生的学号、课程编号、课程名称、学分、平时成绩、实验成绩、卷面成绩这些数据，然后按照给定的综合成绩计算规则（区分有无实验的情况），
	编写函数计算每个学生每门课程的综合成绩，并将结果输出查看。这可以帮助熟悉文件读取操作以及简单的条件判断和数学运算在程序中的应用。
2. **单一条件查询（对应学生基本情况查询中的 A1 功能）**：
    - 实现从 `a.txt` 文件中，通过输入学号来查找并输出对应学生的基本信息（学号、姓名、性别、宿舍号码、电话号码等）。这个题目主要聚焦于文件数据的查找和输出，
	锻炼对文本文件数据的遍历和匹配逻辑编写能力，可先不用考虑太复杂的交互界面。
3. **简单排序功能（对应排序功能的简化版）**：
    - 可以先从给定一组简单的成绩数据（例如数组形式存储）入手，实现按照综合成绩或实得学分进行升序或降序排序，并输出排序后的结果。通过这个题目巩固排序算法的基础知识，
	比如冒泡排序、选择排序等常见简单排序算法的运用。
4. **单一文件的数据删除（对应删除功能的简化）**：
    - 针对 `a.txt` 文件或者 `b.txt` 文件其中之一，编写代码实现根据输入的某个特定条件（比如学号）删除对应行的数据。
	这有助于熟悉文件数据的修改和覆盖写入等文件操作相关知识。

### 尝试的题目序列
按照由易到难、逐步递进的原则，可按照以下题目序列来尝试构建该系统：

1. **题目一：熟悉文件读取与数据显示（基础准备）**
    - **任务描述**：编写 C 语言程序，从 `a.txt` 文件中读取学生的基本信息（学号、姓名、性别、宿舍号码、电话号码等），并将所有学生的信息完整地输出显示在屏幕上。
    - **目的**：掌握文件读取操作的基本函数（如 `fopen`、`fscanf`、`fclose` 等），熟悉如何按格式从文本文件中获取数据，并能正确地输出展示，
	为后续更复杂的数据处理做准备。
2. **题目二：数据录入中的综合成绩计算（对应数据录入功能部分）**
    - **任务描述**：从 `b.txt` 文件中读取学生的学号、课程编号、课程名称、学分、平时成绩、实验成绩、卷面成绩这些数据，按照给定的综合成绩计算规则（区分有无实验的情况），
	编写函数计算每个学生每门课程的综合成绩，然后将学号、课程编号、课程名称、综合成绩这几个数据输出显示在屏幕上。
    - **目的**：深入理解条件判断语句（如 `if - else` 结构）在程序中的应用，掌握根据不同条件进行数学运算来得到所需结果的编程逻辑，同时进一步巩固文件读取操作。
3. **题目三：学生基本情况查询之按学号查询（对应学生基本情况查询功能 A1）**
    - **任务描述**：编写程序实现输入一个学号，在 `a.txt` 文件中查找对应学生的基本信息（学号、姓名、性别、宿舍号码、电话号码等），如果找到则输出该学生的所有信息，
	若未找到给出相应提示。
    - **目的**：锻炼在文件数据中根据特定条件进行查找匹配的能力，掌握循环遍历文件数据以及进行字符串比较（用于学号匹配）等操作，
	初步构建简单的交互逻辑（接收用户输入并给出反馈）。
4. **题目四：简单排序功能实现（对应排序功能简化）**
    - **任务描述**：假设给定一个数组，数组元素包含学号、课程编号、课程名称、综合成绩、实得学分等信息（可手动初始化一些测试数据），编写程序实现按照综合成绩进行升序排序，
	并输出排序后的数组元素信息（展示所有相关信息）。
    - **目的**：掌握基本的排序算法（如冒泡排序、选择排序等）在实际数据结构（这里以简单结构体数组模拟学生课程信息结构）上的应用，
	理解如何通过交换元素来改变数据顺序以达到排序目的，为后续处理文件中的大量数据排序做铺垫。
5. **题目五：实得学分计算与成绩查询功能初版（对应成绩查询功能 B1 部分）**
    - **任务描述**：结合前面题目中实现的综合成绩计算功能以及给定的实得学分计算规则（等级学分制），从 `b.txt` 文件中读取学生的相关课程信息，
	计算出每门课程的实得学分，然后实现输入一个学号时，查询出此生的所有课程情况，按照规定格式输出显示学号、姓名（需从 `a.txt` 文件中根据学号查找对应姓名）、
	课程编号、课程名称、综合成绩、实得学分等信息，最后统计出共修课程数量以及实得总学分并输出。
    - **目的**：整合前面的计算功能和查询功能，实现更复杂的业务逻辑，涉及到多文件数据的关联（从 `a.txt` 获取姓名，从 `b.txt` 获取课程相关成绩等信息），
	进一步强化对文件操作、数据处理以及输出展示的综合编程能力。
6. **题目六：单一文件的数据删除功能（对应删除功能简化）**
    - **任务描述**：针对 `a.txt` 文件，编写程序实现根据输入的学号删除对应学生的所有信息（整行数据删除），
	同时要考虑如何处理文件中数据的覆盖写入以保证文件数据的完整性和正确性。
    - **目的**：掌握文件数据的修改操作，理解如何通过临时文件或者合适的读写指针操作来实现数据的删除功能，为后续实现关联的两个文件数据同步删除做准备。
7. **题目七：完善删除功能及纠错功能（对应删除功能与纠错功能）**
    - **任务描述**：在前面实现 `a.txt` 文件数据删除的基础上，当在 `a.txt` 中删除一个学生时，同步在 `b.txt` 中删除此人所有信息（通过学号关联），
	确保两个文件数据的一致性。同时，添加对手机号码等信息的正确性检查功能，例如判断手机号码是否为 11 位数字等简单验证逻辑，
	当用户录入或文件中读取到不符合规范的手机号码时给出提示并要求重新录入或进行相应处理。
    - **目的**：实现系统中较为关键的数据同步删除功能，强化对多文件操作的协同处理能力，同时初步构建简单的数据纠错机制，提升系统的健壮性和数据合法性。
8. **题目八：完整排序功能与统计功能实现（对应排序功能与统计功能）**
    - **任务描述**：完善排序功能，使其能实现选择按综合成绩或实得学分升序或降序排序，并对 `b.txt` 文件中的所有课程数据进行排序后显示输出。
	同时，编写函数计算各科平均分（根据课程编号来统计每门课程所有学生成绩的平均分），并输出展示各科平均分结果。
    - **目的**：将排序功能进一步拓展为可灵活选择排序依据和排序顺序的完整功能，加深对数据处理和展示的能力要求，同时实现统计功能，锻炼对大量数据的分组统计分析能力，
	使系统功能更加完善。
9. **题目九：文本菜单界面与登录功能构建（对应界面与登录功能）**
    - **任务描述**：采用文本菜单界面，通过 `printf` 和 `scanf` 等函数实现一个简单的命令行式菜单，
	展示系统提供的各个功能选项（如数据录入、查询、删除、排序、统计等），并根据用户选择调用相应的功能函数来执行操作。
	同时，添加登录功能，可简单设置用户名和密码（初始可硬编码在程序中），实现密码验证（可暂时不加密），只有登录成功后才能进入系统菜单进行操作。
    - **目的**：提升用户体验，将各个功能模块整合到一个具有交互界面的系统中，让用户可以方便地选择和使用不同功能，同时初步构建系统的安全访问机制，
	了解基本的用户认证逻辑在程序中的实现方式。
10. **题目十：密码加密与系统整合优化（对整个系统进行完善）**
    - **任务描述**：采用合适的密码加密算法（如简单的哈希算法等，可参考相关资料学习简单加密实现方式）对用户密码进行加密存储和验证，增强系统的安全性。
	同时，对整个系统进行全面的测试和优化，检查各个功能之间的衔接是否顺畅，处理可能出现的边界情况和异常情况，确保系统的稳定性和可靠性。
    - **目的**：完善系统的安全功能，使系统在实际使用中能更好地保护用户数据安全，通过全面的整合优化，让整个学生信息管理系统达到一个相对完整、可用的状态，
	提升综合编程和项目开发能力。

通过按照这样的题目序列逐步进行练习和开发，大二非计算机专业（电子信息专业）的学生可以在现有知识基础上，逐步构建起这个学生信息管理系统，
在实践中不断巩固所学的高级语言程序设计和数据结构知识，提升编程技能和解决实际问题的能力。需要注意的是，在每个题目完成后都要进行充分的测试和调试，
及时发现并解决出现的问题，确保后续功能拓展和整合的顺利进行。 


